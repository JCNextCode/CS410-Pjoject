Exercises
65
However, there is a lack of seamless integration of search engine capabilities
withvarioustextanalysisfunctions, whichisnecessaryforbuildingaunifiedsystem
for supporting text management and analysis. A main design philosophy of META,
which also differentiates META from the existing toolkits, is its emphasis on the
tight integration of search capabilities (indeed, text access capabilities in general)
with text analysis functions, enabling it to provide full support for building a power-
ful text analysis application. To facilitate education and research, META is designed
with an emphasis on modularity and extensibility achieved through object-oriented
design. META can be used together with existing toolkits in multiple ways. For ex-
ample, for very large-scale text applications, an existing search engine toolkit can
be used to support search, while META can be used to further support analysis of
the found search results or any subset of text data that are obtained from the orig-
inal large data set. NLP toolkits can be used to preprocess text data and generate
annotated text data for modules in META to use as input. META can also be used
to generate a text representation that would be fed into a different data mining or
machine learning toolkit.
Exercises
In its simplest form, text data could be a single document in .txt format. This
exercise will get you familiar with various techniques that are used to analyze
text. We’ll use the novel A Tale of Two Cities by Charles Dickens as example text.
The book is called two-cities.txt, and is located at http://sifaka.cs.uiuc.edu/ir/
textdatabook/two-cities.txt. You can also use any of your own plaintext files that
have multiple English sentences.
Like all future exercises, we will assume that the reader followed the META setup
guide and successfully compiled the executables. In this exercise, we’ll only be
using the profile program. Running ./profile from inside the build/ directory
will print out the following usage information:
Usage: ./profile config.toml file.txt [OPTION]
where [OPTION] is one or more of:
--stem
perform stemming on each word
--stop
remove stop words
--pos
annotate words with POS tags
--pos-replace
replace words with their POS tags
--parse create grammatical parse trees from file content
--freq-unigram
sort and count unigram words
--freq-bigram
sort and count bigram words
--freq-trigram
sort and count trigram words
--all
run all options
