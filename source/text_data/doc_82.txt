62
Chapter 4
META: A Unified Toolkit for Text Data Management and Analysis
list_filter. this filter either accepts or rejects tokens based on a list. For
example, one could use a stop word list and reject stop words.
porter2_stemmer. this filter transforms each token according to the Porter2
English Stemmer rules.4
Analyzers operate on the output from the filter chain and produce token counts
from documents. Here are some examples of analyzers.
ngram_word_analyzer. Collects and counts sequences of n words (tokens)
that have been filtered by the filter chain.
ngram_pos_analyzer. Same as ngram_word_analyzer, but operates on part-
of-speech tags from METAâ€™s CRF implementation.
tree_analyzer. Collects and counts occurrences of parse tree features.
libsvm_analyzer. Converts a LIBSVM line_corpus into META format.
META defines a sane default filter chain that users are encouraged to use for
general text analysis in the absence of any specific requirements. To use it, one
should specify the following in the configuration file:
[[analyzers]]
method = "ngram-word"
ngram = 1
filter = "default-chain"
This configures the text analysis process to consider unigrams of words gener-
ated by running each document through the default filter chain. This filter chain
should work well for most languages, as all of its operations (including but not lim-
ited to tokenization and sentence boundary detection) are defined in terms of the
Unicode standard wherever possible.
To consider both unigrams and bigrams, the configuration file should look like
the following:
[[analyzers]]
method = "ngram-word"
ngram = 1
filter = "default-chain"
[[analyzers]]
4. http://snowball.tartarus.org/algorithms/english/stemmer.html
