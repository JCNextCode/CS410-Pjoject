8
Search Engine
Implementation
This chapter focuses on how to implement an information retrieval (IR) system or
a search engine. In general, an IR system consists of four components.
Tokenizer.
This component takes in documents as raw strings and determines
how to separate the large document string into separate tokens (or features).
These token streams are then passed on to the indexer. This is perhaps the
most vital part of the system as a whole, since a poor tokenization method
will affect all other parts of the indexing, and propagate downstream to the
end user.
Indexer.
This is the module that processes documents and indexes them with
appropriate data structures. An Indexer can be run offline. The main chal-
lengesaretoindexlargeamountsofdocumentsquicklywithalimitedamount
of memory. Other challenges include supporting addition and deletion of doc-
uments.
Scorer/Ranker.
This is the module that takes a query and returns a ranked list of
documents. Here the challenge is to implement a retrieval model efficiently
so that we can score documents efficiently.
Feedback/Learner.
This is the module that is responsible for relevance feed-
back or pseudo feedback. When there is a lot of implicit feedback information
such as user clickthroughs available (as in a modern web search engine), this
learning module can be fairly sophisticated. It was discussed in detail in the
previous chapter, so in this chapter we will just outline how it may be added
to an existing system.
For the first three items, there are fairly standard techniques that are essentially
used in all current search engines. The techniques for implementing feedback,
