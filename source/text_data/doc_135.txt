6.4 Probabilistic Retrieval Models
115
… news of presidential campaign
… presidential candidate …
p(q|d4 =
p(q = “presidential campaign”|d) = 
c(“presidential”, d) *
—
|d|
c(“campaign”, d)
—
|d|
p(q|d3 =
) = 
p(q|d2 =
) = 
2 *
—
|d4|
1
—
|d4|
1 *
—
|d3|
1
—
|d3|
) = 
= 0
0 *
—
|d2|
1
—
|d2|
… news about organic food 
campaign …
… news of presidential campaign …
Figure 6.21
Computing the probability of a query given a document using the query likelihood
formulation.
We’ve made the assumption that each query word is independent and that
each word is obtained from the imagined ideal document satisfying the user’s
information need. Let’s see how this works exactly. Since we are computing a query
likelihood, then the total probability is the probability of this particular query,
which is a sequence of words. Since we make the assumption that each word
is generated independently, the probability of the query is just a product of the
probabilityofeachqueryword, wheretheprobabilityofeachwordisjusttherelative
frequency of the word in the document. For example, the probability of presidential
given the document would be just the count of presidential in the document divided
by the total number of words in the document (i.e., the document length). We now
have an actual formula for retrieval that we can use to rank documents.
Let’s take a look at some example documents from Figure 6.21. Suppose now
the query is presidential campaign. To score these documents, we just count how
many times we have seen presidential and how many times we have seen campaign.
We’ve seen presidential two times in d4, so that’s
2
|d4|. We also multiply by
1
|d4| for the
probability of campaign. Similarly, we can calculate probabilities for the other two
documents d3 and d2. If we assume d3 and d4 have about the same length, then it
looks like we will rank d4 above d3, which is above d2. As we would expect, it looks
like this formulation captures the TF heuristic from the vector space models.
However, if we try a different query like this one, presidential campaign update,
then we might see a problem. Consider the word update: none of the documents
contain this word. According to our assumption that a user would pick a word from
a document to generate a query, the probability of obtaining a word like update
