6.3 Vector Space Retrieval Models
97
and showed that this scoring function scores a document based on the number of
distinct query words matched in it. We also showed that such a simple vector space
model still doesn’t work well, and we need to improve it. This is the topic for the
next section.
6.3.3
Improved Instantiation
In this section, we will improve the representation of this model from the bit
vector model. We saw the bit vector representation essentially counts how many
unique query terms match the document. From Figure 6.6 we would like d4 to be
ranked above d3, and d2 is really not relevant. The problem here is that this function
couldn’t capture the following characteristics.
.
First, we would like to give more credit to d4 because it matches presidential
more times than d3.
.
Second, matching presidential should be more important than matching
about, becauseabout isaverycommonwordthatoccurseverywhere; itdoesn’t
carry that much content.
It’s worth thinking at this point about why we have these issues. If we look back at
the assumptions we made while instantiating the VS model, we will realize that the
problem is really coming from some of those assumptions. In particular, it has to
do with how we place the vectors in the vector space. Naturally, in order to fix these
problems, we have to revisit those assumptions. A natural thought is to consider
multiple occurrences of a term in a document as opposed to binary representation;
we should consider the TF instead of just the absence or presence. In order to
consider the difference between a document where a query term occurred multiple
times and one where the query term occurred just once, we have to consider the
term frequency—the count of a term in a document. The simplest way to express
the TF of a word w in a document d is
T F(w, d) = count(w, d).
(6.1)
With the bit vector, we only captured the presence or absence of a term, ignoring
the actual number of times that a term occurred. Let’s add the count information
back: we will represent a document by a vector with as each dimension’s weight.
That is, the elements of both the query vector and the document vector will not be
zeroes and ones, but instead they will be the counts of a word in the query or the
document, as illustrated in Figure 6.7.
