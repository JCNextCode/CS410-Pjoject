164
Chapter 8
Search Engine Implementation
Primary  map
Secondary  map
K,V7
K,V3
K,V1
K,V13
K,V4
K,V17
K,V9
K,V20
K,V2
K,V5
K,V12
K,V8
Figure 8.4
A full Double Barrel Least-Recently Used (DBLRU) cache.
list in O(1) time. When we need to remove the LRU item, we look at the element at
the tail (end) of the linked list and delete it, also in constant time.
8.6.2
DBLRU cache
The double barrel LRU cache was originally used in the popular Lucene search
engine.2 It is a simplified approximation of the LRU cache. Figure 8.4 shows a
DBLRU cache with size six.
The DBLRU cache is just two hash tables named primary and secondary. The
algorithm is as follows, assuming we want to retrieve the postings list for term ID x.
.
First, search primary for term ID x; if it exists, return it.
.
If it’s not in primary, search secondary.
.
If it’s in secondary, delete it. Insert it in primary and return it. If this causes
primary to reach the maximum size, clear the entire contents of secondary.
Then, swap the two hash tables.
.
If it’s not in secondary, retrieve it from disk and insert it into secondary.
This cache has a rough hierarchy of usage: primary contains elements that are
more frequently accessed than secondary. So when the cache fills, the secondary
table is emptied to free memory. While the temporal accuracy of the DBLRU cache
is not as precise as the LRU cache, it is a much simpler setup, which translates to
faster access times. As usual, there is a tradeoff between the speed and accuracy of
these two caches.
2. https://lucene.apache.org/
